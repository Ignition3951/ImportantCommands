docker images
docker ps
docker stop
docker build -t utk1311/spring-3-example-docker .
docker images | head
docker tag kubia luksa/kubia
docker rm kubia-container
docker stop kubia-container
docker exec -it kubia-container bash-->commands didnt work in bash
docker run --name kubia-container -p 8080:8080 -d kubia
docker images
docker build -t kubia .
docker push luksa/kubia
docker run -p 8080:8080 -d luksa/kubia

process to make changes in docker:
	make changes in the project
	run mvn clean and mvn install
	run docker build -t kubia .
	run docker push luksa/kubia
	run docker run -p 8080:8080 -d luksa/kubia

Steps to install docker in ubuntu lts:
	
	sudo apt update
	sudo apt install docker.io -y
	sudo systemctl enable docker --now
	docker --version
	

Executing the Docker Command Without Sudo:

	sudo usermod -aG docker $USER
	newgrp docker
	docker run hello-world


Trying to run a java program inside docker:
	Go to /etc/docker inside the vm created
	create a folder structure
	make docker file in it
	run docker build command --> an image will be created from this command
	run the docker run command --> a container will be created using the image we built earlier
	After running the above command the container will run and exit --> the container will not be shown by "docker ps" command
	as it has already exited we have to use "docker ps -a" to show the container
	The container created can be found on the path "/var/lib/docker/containers". This will be having all the details regarding the particular container.
	The container logs can be checked by: docker logs <container-name>

Install the docker compose command:
	Link to be followed(https://www.geeksforgeeks.org/fix-the-docker-compose-command-not-found-error/):

	sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
	sudo chmod +x /usr/local/bin/docker-compose
	docker-compose --version--->(Check with this command to ensure the installation is correct)

To up/down the compose file we use the following command:
	docker-compose -f docker-compose-mysql-only.yml up--> (the file path used is /etc/docker)
	docker-compose -f docker-compose.prod.yml up -d
	docker-compose -f docker-compose.prod.yml down

To know the IP Address of the containers:
	docker inspect <container-name> | grep IPAddress


Explaination of the docker command given:
	docker run -it --rm -d -p 8080:80 --name web nginx	(if port 8080 is not available then change the port by th following command: docker run -it --rm -d -p 8082:80 --name web nginx)

	Here's what each part means:
	docker run: This is the basic Docker command to create and run a new container.

	-it: Combines two flags:

	-i keeps STDIN open, which is useful for interactive sessions.

	-t allocates a pseudo-TTY, giving you a terminal interface.

	--rm: Automatically removes the container when it exits. Handy for keeping your system tidy.

	-d: Runs the container in detached mode, so it runs in the background.

	-p 8080:80: Maps port 8080 on your host machine to port 80 inside the container, which is where Nginx listens by 	default.

	--name web: Gives the container a custom name—web, in this case.

	nginx: Specifies the image to use—here, it's the official Nginx web server.
	

To go inside the conatiner running the new image that was pulled by docker pull of nginx lua:
	docker exec -it webserver /bin/sh