git rm -r --cached <folder>  -->remove file from staging area so that it is no more tracked
git clean -fd  -->to change the local code to the last commit
git cherry-pick af02e0b-->cherry pick the commit into your branch
Run git remote -v to see the current remote URL--->
	git remote -v
Update the remote URL with git remote set-url using the current and new remote URLs.-->
	git remote set-url origin git@bitbucket.org:tutorials/tutorials.git
git revert 4945db2-->When you revert a Git commit, the changes from the targeted commit are removed from your local workspace. A new commit is also created to reflect the new state of your repository.

git checkout -b feature-branch abc1234-->This will create a new branch called feature-branch starting from the commit abc1234 and switch to it immediately.

Change the last commit message after push:
git commit --amend
git push --force-with-lease origin master

If you want to know what will go in the next commit:
git diff --staged or git diff --cached

If you have staged all the commits then git diff will show you no changes as it only shows you the changes that are still unstaged.


If you want to skip the staging area then the following command can be used:
git commit -a -m 'added new benchmarks'

If you want to keep files in the working directory but dont want git to track them:
git rm --cached README

If you want to see the difference between commits limited to 2:
git log -p -2

Print changes in oneline:
git log --pretty=oneline

If you want to see the commits in your own format and graph structure:
git log --pretty=format:"%h %s" --graph


This command gets the list of commits made in the last two weeks:
$ git log --since=2.weeks


If you commit and then realize you forgot to stage the changes in a file you wanted to add to this
commit, you can do something like this:
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend (You end up with a single commit—the second commit replaces the results of the first.)

To move the file from staged to unstaged area use the following command:
"git reset HEAD <file>"

Revert to what it looked like when you last committed:
git checkout -- <file>
NOTE: Important It’s important to understand that git checkout -- [file] is a dangerous command. Any changes you
made to that file are gone—you just copied another file over it. Don’t ever use this command unless you absolutely know
that you don’t want the file.

DIFFERENCE BETWEEN FETCH AND PULL:
It’s important to note that the git fetch command pulls the data to your local repository—it doesn’t automatically
merge it with any of your work or modify what you’re currently working on. You have to merge it manually into your
work when you’re ready.

Running git pull generally fetches data from the server you originally cloned from and
automatically tries to merge it into the code you’re currently working on.

You can create your own alias for the commands which you use frequently:
git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit--> (instead of typing git commit, you just need to type git ci.)
$ git config --global alias.st status
$ git config --global alias.last 'log -1 HEAD'-->(This way, you can see the last commit easily:)

Changing in master branch to diverge branches.

How does git know which branch you are? --> It keeps a special pointer called HEAD

Switching the branches will also change the working directory.

git checkout -b iss53 --> create and switch to a new branch

If you merge and the commit can be found by travelling in the history of commits you want to merge then simply the pointer is moved forward which is known as fasat-forward in git.

To see the last commit on each branch run the following command:
git branch -v

To see which branches are already merged into the branch you’re on, you can run:
git branch --merged

To see all the branches that contain work you haven’t yet merged in, you can run:
git branch --no-merged

git push origin serverfix:serverfix, which does the same thing – it says, “Take my serverfix and
make it the remote’s serverfix.”

This gives you a local branch that you can work on that starts where origin/serverfix is:
$ git checkout -b serverfix origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'


If you want the latest numbers as to how your branches are faring compared to the remote branches then use the following command:
git fetch --all
git branch -vv

Git rebase in action:
	git rebase --onto master server client --> (“Check out the client branch, figure out the patches from the common ancestor of the client
and server branches, and then replay them onto master.” It’s a bit complex, but the result is pretty cool.)


